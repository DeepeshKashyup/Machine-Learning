setwd("~/Machine Learning A-Z Template Folder/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
View(dataset)
dataset = read.csv('Churn_Modelling.csv')
dataset$Country = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset = read.csv('Churn_Modelling.csv')
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
# Encoding categorical data
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(0, 1))
dataset = read.csv('Churn_Modelling.csv')
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(0, 1))
split = sample.split(dataset$Exited, SplitRatio = 0.8)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
dataset = dataset[,c(-1)]
dataset = dataset[,c(-1,-2)]
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,c(-1,-2)]
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,c(-1,-2)]
dataset = dataset[,3:14]
dataset = dataset[,4:14]
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(0, 1))
str(dataset)
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(0, 1)))
str(dataset)
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(0, 1)))
str(dataset)
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
# Encoding categorical data as numeric(coz deep learning package needs numbers)
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 2)))
str(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-11] <- scale(training_set[-11])
test_set[-11] <- scale(test_set[-11)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] <- scale(training_set[-11])
test_set[-11] <- scale(test_set[-11)
test_set[-11] <- scale(test_set[-11))
test_set[-11] <- scale(test_set[-11])
View(training_set)
View(training_set)
View(test_set)
View(test_set)
install_packages('H20')
install_packages('H2o')
install_packages('h2o')
install.packages('h2o')
library(h2o)
classifier = h2o.deeplearning(y='Exited',training_frame = training_set)
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set))
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set))
View(classifier)
View(classifier)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
#[number of hidden layers,no of nodes in hidden layer]
hidden=c(2,6))
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
#[number of hidden layers,no of nodes in hidden layer]
hidden=c(6,6))
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
#[no of nodes in hidden layer]
hidden=c(6,6,6,6,6))
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
#[no of nodes in hidden layer]
hidden=c(6,6,6,6,6),
epochs=100)
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
#[no of nodes in hidden layer]
hidden=c(6,6,6,6,6),
epochs=100,
#train_samples_per_iteration = batch size
train_samples_per_iteration = 1)
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
#[no of nodes in hidden layer]
hidden=c(6,6,6,6,6),
epochs=100,
#train_samples_per_iteration = batch size -2 auto tune(best)
train_samples_per_iteration = -2)
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
#[no of nodes in hidden layer]
hidden=c(6,6),
epochs=100,
#train_samples_per_iteration = batch size -2 auto tune(best)
train_samples_per_iteration = -2)
library(h2o)
# nthreads = -1 uses all the cores of the system, us ip for specify ip address of compute
h2o.init(nthreads = -1)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
prob_pred = predict(classifier, type = 'response', newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cm = table(test_set[-11], y_pred > 0.5)
cm = table(test_set[11], y_pred > 0.5)
prob_pred = predict(classifier, type = 'response', newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
cm = table(test_set[11], y_pred > 0.5)
prob_pred = h2o.predict(classifier, type = 'response', newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cm = table(test_set[11], y_pred > 0.5)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
View(prob_pred)
View(prob_pred)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cm = table(as.h2o(test_set[11], y_pred) > 0.5)
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
cm = table(test_set[11], y_pred)
View(prob_pred)
View(prob_pred)
View(test_set)
View(test_set)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[11], y_pred)
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[,4:14]
# Encoding categorical data as numeric(coz deep learning package needs numbers)
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 2)))
str(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] <- scale(training_set[-11])
test_set[-11] <- scale(test_set[-11])
# Fitting ANN to the Training set
#install.packages('h2o')
library(h2o)
# nthreads = -1 uses all the cores of the system, us ip for specify ip address of compute
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
#[no of nodes in hidden layer]
hidden=c(6,6),
epochs=100,
#train_samples_per_iteration = batch size -2 auto tune(best)
train_samples_per_iteration = -2)
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[11], y_pred)
cm = table(test_set[,11], y_pred)
cm
(1538+191)/2000
classifier = h2o.deeplearning(y='Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
#[no of nodes in hidden layer]
hidden=c(6,6,6,6),
epochs=100,
#train_samples_per_iteration = batch size -2 auto tune(best)
train_samples_per_iteration = -2)
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[,11], y_pred)
cm
(1538+194)/2000
h2o.shutdown()
